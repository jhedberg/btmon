use nom::{IResult, multi::length_data, number::complete::{le_u16, le_u8}, sequence::tuple};
use num_enum::FromPrimitive;
use std::fmt;

#[derive(Debug, Eq, PartialEq)]
pub struct Event<'a> {
    code: u8,
    param: &'a [u8],
}

#[derive(Debug, Eq, PartialEq)]
pub struct LeMeta <'a> {
    sub: u8,
    param: &'a[u8],
}

fn status_str(status: u8) -> &'static str {
    match status {
        0x00 => "Success",
        0x01 => "Unknown HCI command",
        0x02 => "Unknown Connection Identifier",
        0x03 => "Hardware Failure",
        0x04 => "Page Timeout",
        0x05 => "Authentication Failure",
        0x06 => "PIN or Key Missing",
        0x07 => "Memory Capacity Exceeded",
        0x08 => "Connection Timeout",
        0x09 => "Connection Limit Exceeded",
        0x0a => "Synchronous Connection Limit To A Device Exceeded",
        0x0b => "ACL Connection Already Exists",
        0x0c => "Command Disallowed",
        0x0d => "Connection Rejected due to Limited Resources",
        0x0e => "Connection Rejected due to Security Reasons",
        0x0f => "Connection Rejected due to Unacceptable BD_ADDR",
        0x10 => "Connection Accept Timeout Exceeded",
        0x11 => "Unsupported Feature or Parameter Value",
        0x12 => "Invalid HCI Command Parameters",
        0x13 => "Remote User Terminated Connection",
        0x14 => "Remote Device Terminated Connection due to Low Resources",
        0x15 => "Remote Device Terminated Connection due to Power Off",
        0x16 => "Connection Terminated By Local Host",
        0x17 => "Repeated Attempts",
        0x18 => "Pairing Not Allowed",
        0x19 => "Unknown LMP PDU",
        0x1a => "Unsupported Remote Feature / Unsupported LMP Feature",
        0x1b => "SCO Offset Rejected",
        0x1c => "SCO Interval Rejected",
        0x1d => "SCO Air Mode Rejected",
        0x1e => "Invalid LMP Parameters / Invalid LL Parameters",
        0x1f => "Unspecified Error",
        0x20 => "Unsupported LMP Parameter Value / Unsupported LL Parameter Value",
        0x21 => "Role Change Not Allowed",
        0x22 => "LMP Response Timeout / LL Response Timeout",
        0x23 => "LMP Error Transaction Collision",
        0x24 => "LMP PDU Not Allowed",
        0x25 => "Encryption Mode Not Acceptable",
        0x26 => "Link Key Cannot Be Changed",
        0x27 => "Requested QoS Not Supported",
        0x28 => "Instant Passed",
        0x29 => "Pairing With Unit Key Not Supported",
        0x2a => "Different Transaction Collision",
        0x2b => "Reserved for future use",
        0x2c => "QoS Unacceptable Parameter",
        0x2d => "QoS Rejected",
        0x2e => "Channel Classification Not Supported",
        0x2f => "Insufficient Security",
        0x30 => "Parameter Out Of Mandatory Range",
        0x31 => "Reserved for future use",
        0x32 => "Role Switch Pending",
        0x33 => "Reserved for future use",
        0x34 => "Reserved Slot Violation",
        0x35 => "Role Switch Failed",
        0x36 => "Extended Inquiry Response Too Large",
        0x37 => "Secure Simple Pairing Not Supported By Host",
        0x38 => "Host Busy - Pairing",
        0x39 => "Connection Rejected due to No Suitable Channel Found",
        0x3a => "Controller Busy",
        0x3b => "Unacceptable Connection Parameters",
        0x3c => "Advertising Timeout",
        0x3d => "Connection Terminated due to MIC Failure",
        0x3e => "Connection Failed to be Established / Synchronization Timeout",
        0x3f => "MAC Connection Failed",
        0x40 => "Coarse Clock Adjustment Rejected but Will Try to Adjust Using Clock Dragging",
        0x41 => "Type0 Submap Not Defined",
        0x42 => "Unknown Advertising Identifier",
        0x43 => "Limit Reached",
        0x44 => "Operation Cancelled by Host",
        0x45 => "Packet Too Long",
        _    => "Unknown",
    }
}

fn le_sub_str(sub: u8) -> &'static str {
    match sub {
        0x01 => "LE Connection Complete",
        0x02 => "LE Advertising Report",
        0x03 => "LE Connection Update Complete",
        0x04 => "LE Read Remote Features Page 0 Complete",
        0x05 => "LE Long Term Key Request",
        0x06 => "LE Remote Connection Parameter Request",
        0x07 => "LE Data Length Change",
        0x08 => "LE Read Local P-256 Public Key Complete",
        0x09 => "LE Generate DHKey Complete",
        0x0a => "LE Enhanced Connection Complete [v1]",
        0x29 => "LE Enhanced Connection Complete [v2]",
        0x0b => "LE Directed Advertising Report",
        0x0c => "LE PHY Update Complete",
        0x0d => "LE Extended Advertising Report",
        0x0e => "LE Periodic Advertising Sync Established [v1]",
        0x24 => "LE Periodic Advertising Sync Established [v2]",
        0x0f => "LE Periodic Advertising Report [v1]",
        0x25 => "LE Periodic Advertising Report [v2]",
        0x10 => "LE Periodic Advertising Sync Lost",
        0x11 => "LE Scan Timeout",
        0x12 => "LE Advertising Set Terminated",
        0x13 => "LE Scan Request Received",
        0x14 => "LE Channel Selection Algorithm",
        0x15 => "LE Connectionless IQ Repor",
        0x16 => "LE Connection IQ Report",
        0x17 => "LE CTE Request Failed",
        0x18 => "LE Periodic Advertising Sync Transfer Receive [v1]",
        0x26 => "LE Periodic Advertising Sync Transfer Receive [v2]",
        0x19 => "LE CIS Established [v1]",
        0x2a => "LE CIS Established [v2]",
        0x1a => "LE CIS Request",
        0x1b => "LE Create BIG Complete",
        0x1c => "LE Terminate BIG Complete",
        0x1d => "LE BIG Sync Established",
        0x1e => "LE BIG Sync Lost",
        0x1f => "LE Request Peer SCA Complete",
        0x20 => "LE Path Loss Threshold",
        0x21 => "LE Transmit Power Reporting",
        0x22 => "LE BIGInfo Advertising Report",
        0x23 => "LE Subrate Change",
        0x27 => "LE Periodic Advertising Subevent Data Request",
        0x28 => "LE Periodic Advertising Response Report",
        0x2b => "LE Read All Remote Features Complete",
        0x2c => "LE CS Read Remote Supported Capabilities Complete",
        0x2d => "LE CS Read Remote FAE Table Complete",
        0x2e => "LE CS Security Enable Complete",
        0x2f => "LE CS Config Complete",
        0x30 => "LE CS Procedure Enable Complet",
        0x31 => "LE CS Subevent Result",
        0x32 => "LE CS Subevent Result Continue",
        0x33 => "LE CS Test End Complete",
        0x34 => "LE Monitored Advertisers Report",
        0x35 => "LE Frame Space Update Complete",
        _    => "LE <Unknown>",
    }
}

fn disconnect_complete(param: &[u8]) -> IResult<&[u8], (u8, u16, u8)> {
    tuple((le_u8, le_u16, le_u8))(param)
}

fn command_complete(param: &[u8]) -> IResult<&[u8], (u8, u16)> {
    tuple((le_u8, le_u16))(param)
}

fn command_status(param: &[u8]) -> IResult<&[u8], (u8, u8, u16)> {
    tuple((le_u8, le_u8, le_u16))(param)
}

fn num_completed_pkts(param: &[u8]) -> IResult<&[u8], (u8, u16, u16)> {
    tuple((le_u8, le_u16, le_u16))(param)
}

fn le_meta(param: &[u8]) -> IResult<&[u8], u8> {
    le_u8(param)
}

impl fmt::Display for Event<'_> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self.code {
            0x01 => write!(f, "Inquiry Complete"),
            0x02 => write!(f, "Inquiry Result"),
            0x03 => write!(f, "Connection Complete"),
            0x04 => write!(f, "Connection Request"),
            0x05 => {
                match disconnect_complete(self.param) {
                    Ok((_, (status, handle, reason))) => {
                        write!(f, "Disconnect Complete: {} (0x{:02x}) handle 0x{:04x} reason 0x{:02x}",
                            status_str(status), status, handle, reason)
                    },
                    Err(e) => write!(f, "Disconnect Complete failed to parse: {:?}", e),
                }
            },
            0x06 => write!(f, "Authentication Complete"),
            0x07 => write!(f, "Remote Name Request Complete"),
            0x08 => write!(f, "Encryption Change"),
            0x09 => write!(f, "Change Connection Link Key Complete"),
            0x0a => write!(f, "Master Link Key Complete"),
            0x0b => write!(f, "Read Remote Supported Features Complete"),
            0x0c => write!(f, "Read Remote Version Information Complete"),
            0x0d => write!(f, "QoS Setup Complete"),
            0x0e => {
                match command_complete(self.param) {
                    Ok((rem, (ncmd, op))) => {
                        write!(f, "Command Complete: ncmd {} {} param {:02x?}", ncmd, Op::from(op), rem)
                    },
                    Err(e) => write!(f, "Command Complete failed to parse: {:?}", e),
                }
            },
            0x0f => {
                match command_status(self.param) {
                    Ok((_, (status, ncmd, op))) => {
                        write!(f, "Command Status: {} (0x{:02x}) ncmd {} {}", status_str(status), status, ncmd, Op::from(op))
                    },
                    Err(e) => write!(f, "Command Status failed to parse: {:?}", e),
                }
            },
            0x10 => write!(f, "Hardware Error"),
            0x11 => write!(f, "Flush Occurred"),
            0x12 => write!(f, "Role Change"),
            0x13 => {
                match num_completed_pkts(self.param) {
                    Ok((_, (_n_handles, handle, pkts))) => {
                        write!(f, "Number Of Completed Packets: handle 0x{:04x} pkts {}", handle, pkts)
                    },
                    Err(e) => write!(f, "Number Of Completed Packets failed to parse: {:?}", e),
                }
            },
            0x14 => write!(f, "Mode Change"),
            0x15 => write!(f, "Return Link Keys"),
            0x16 => write!(f, "PIN Code Request"),
            0x17 => write!(f, "Link Key Request"),
            0x18 => write!(f, "Link Key Notification"),
            0x19 => write!(f, "Loopback Command"),
            0x1a => write!(f, "Data Buffer Overflow"),
            0x1b => write!(f, "Max Slots Change"),
            0x1c => write!(f, "Read Clock Offset Complete"),
            0x1d => write!(f, "Connection Packet Type Changed"),
            0x1e => write!(f, "QoS Violation"),
            0x1f => write!(f, "Page Scan Mode Change"),
            0x20 => write!(f, "Page Scan Repetition Mode Change"),
            0x21 => write!(f, "Flow Specification Complete"),
            0x22 => write!(f, "Inquiry Result with RSSI"),
            0x23 => write!(f, "Read Remote Extended Features Complete"),
            0x2c => write!(f, "Synchronous Connection Complete"),
            0x2d => write!(f, "Synchronous Connection Changed"),
            0x2e => write!(f, "Sniff Subrating"),
            0x2f => write!(f, "Extended Inquiry Result"),
            0x30 => write!(f, "Encryption Key Refresh Complete"),
            0x31 => write!(f, "IO Capability Request"),
            0x32 => write!(f, "IO Capability Response"),
            0x33 => write!(f, "User Confirmation Request"),
            0x34 => write!(f, "User Passkey Request"),
            0x35 => write!(f, "Remote OOB Data Request"),
            0x36 => write!(f, "Simple Pairing Complete"),
            0x38 => write!(f, "Link Supervision Timeout Changed"),
            0x39 => write!(f, "Enhanced Flush Complete"),
            0x3b => write!(f, "User Passkey Notification"),
            0x3c => write!(f, "Keypress Notification"),
            0x3d => write!(f, "Remote Host Supported Features Notification"),
            0x3e => {
                match le_meta(self.param) {
                    Ok((rem, sub)) => {
                        write!(f, "{} (0x{:02x}) param {:02x?}", le_sub_str(sub), sub, rem)
                    },
                    Err(e) => write!(f, "LE Meta failed to parse: {:?}", e),
                }
            },
            0x40 => write!(f, "Physical Link Complete"),
            0x41 => write!(f, "Channel Selected"),
            0x42 => write!(f, "Disconnection Physical Link Complete"),
            0x43 => write!(f, "Physical Link Loss Early Warning"),
            0x44 => write!(f, "Physical Link Recovery"),
            0x45 => write!(f, "Logical Link Complete"),
            0x46 => write!(f, "Disconnection Logical Link Complete"),
            0x47 => write!(f, "Flow Spec Modify Complete"),
            0x48 => write!(f, "Number Of Completed Data Blocks"),
            0x4c => write!(f, "Short Range Mode Change Complete"),
            0x4d => write!(f, "AMP Status Change"),
            0x4e => write!(f, "AMP Start Test"),
            0x4f => write!(f, "AMP Test End"),
            0x50 => write!(f, "AMP Receiver Report"),
            0x51 => write!(f, "Short Range Mode Change Complete"),
            0x52 => write!(f, "AMP Status Change"),
            _ => {
                write!(f, "0x{:02x} (Unknown): {:02x?}", self.code, self.param)
            },
        }
    }
}

impl Event <'_> {
    pub fn parse(data: &'_[u8]) -> IResult<&[u8], Event> {
        let (data, code) = le_u8(data)?;
        let (data, param) = length_data(le_u8)(data)?;

        Ok((data, Event { code, param }))
    }
}

#[repr(u8)]
enum Ogf {
    LinkControl = 0x01,
    LinkPolicy  = 0x02,
    Baseband    = 0x03,
    Info        = 0x04,
    Status      = 0x05,
    Testing     = 0x06,
    Le          = 0x08,
    // Vs = 0x3f,
}

// OpCode from OGF + OCF
macro_rules! op {
    ($ogf:expr, $ocf:expr) => (
        (($ocf) | (($ogf as u16) << 10))
    );
}

// OGF from OpCode
macro_rules! ogf {
    ($op:expr) => (
        (($op >> 10) & 0b111111)
    );
}

// OCF from OpCode
macro_rules! ocf {
    ($op:expr) => (
        ($op & 0b111111)
    );
}

use Ogf::*;

#[repr(u16)]
#[derive(Debug, PartialEq, Eq, FromPrimitive)]
pub enum Op {
    // Link Control commands
    Inquiry                       = op!(LinkControl, 0x0001),
    InquiryCancel                 = op!(LinkControl, 0x0002),
    PeriodicInquiryMode           = op!(LinkControl, 0x0003),
    ExitPeriodicInquiryMode       = op!(LinkControl, 0x0004),
    CreateConn                    = op!(LinkControl, 0x0005),
    Disconnect                    = op!(LinkControl, 0x0006),
    AddScoConn                    = op!(LinkControl, 0x0007),
    CreateConnCancel              = op!(LinkControl, 0x0008),
    AcceptConnReq                 = op!(LinkControl, 0x0009),
    RejectConnReq                 = op!(LinkControl, 0x000a),
    LinkKeyReqReply               = op!(LinkControl, 0x000b),
    LinkKeyReqNegReply            = op!(LinkControl, 0x000c),
    PinCodeReqReply               = op!(LinkControl, 0x000d),
    PinCodeReqNegReply            = op!(LinkControl, 0x000e),
    ChangeConnPacketType          = op!(LinkControl, 0x000f),
    AuthRequested                 = op!(LinkControl, 0x0011),
    SetConnEncryption             = op!(LinkControl, 0x0013),
    ChangeConnLinkKey             = op!(LinkControl, 0x0015),
    MasterLinkKey                 = op!(LinkControl, 0x0017),
    RemoteNameReq                 = op!(LinkControl, 0x0019),
    RemoteNameReqCancel           = op!(LinkControl, 0x001a),
    ReadRemoteSuppFeatures        = op!(LinkControl, 0x001b),
    ReadRemoteExtFeatures         = op!(LinkControl, 0x001c),
    ReadRemoteVerInfo             = op!(LinkControl, 0x001d),
    ReadClockOffset               = op!(LinkControl, 0x001f),
    ReadLmpHandle                 = op!(LinkControl, 0x0020),
    SetupSyncConn                 = op!(LinkControl, 0x0028),
    AcceptSyncConnReq             = op!(LinkControl, 0x0029),
    RejectSyncConnReq             = op!(LinkControl, 0x002a),
    IoCapReqReply                 = op!(LinkControl, 0x002b),
    UserConfirmReqReply           = op!(LinkControl, 0x002c),
    UserConfirmReqNegReply        = op!(LinkControl, 0x002d),
    UserPasskeyReqReply           = op!(LinkControl, 0x002e),
    UserPasskeyReqNegReply        = op!(LinkControl, 0x002f),
    RemoteOobDataReqReply         = op!(LinkControl, 0x0030),
    RemoteOobDataReqNegReply      = op!(LinkControl, 0x0033),
    IoCapReqNegReply              = op!(LinkControl, 0x0034),
    CreatePhyLink                 = op!(LinkControl, 0x0035),
    AcceptPhyLink                 = op!(LinkControl, 0x0036),
    DisconnectPhyLink             = op!(LinkControl, 0x0037),
    CreateLogicalLink             = op!(LinkControl, 0x0038),
    AcceptLogicalLink             = op!(LinkControl, 0x0039),
    DisconnectLogicalLink         = op!(LinkControl, 0x003a),
    LogicalLinkCancel             = op!(LinkControl, 0x003b),
    FlowSpecModify                = op!(LinkControl, 0x003c),
    EnhancedSetupSyncConn         = op!(LinkControl, 0x003d),
    EnhancedAcceptSyncConnReq     = op!(LinkControl, 0x003e),
    TruncatedPage                 = op!(LinkControl, 0x003f),
    TruncatedPageCancel           = op!(LinkControl, 0x0040),
    SetConnlessSlaveBroadcast     = op!(LinkControl, 0x0041),
    SetConnlessSlaveBroadcastRecv = op!(LinkControl, 0x0042),
    StartSyncTrain                = op!(LinkControl, 0x0043),
    RecvSyncTrain                 = op!(LinkControl, 0x0044),

    // Link Policy commands
    HoldMode                      = op!(LinkPolicy, 0x0001),
    SniffMode                     = op!(LinkPolicy, 0x0003),
    ExitSniffMode                 = op!(LinkPolicy, 0x0004),
    ParkState                     = op!(LinkPolicy, 0x0005),
    ExitParkState                 = op!(LinkPolicy, 0x0006),
    QoSSetup                      = op!(LinkPolicy, 0x0007),
    RoleDiscovery                 = op!(LinkPolicy, 0x0009),
    SwitchRole                    = op!(LinkPolicy, 0x000b),
    ReadLinkPolicySettings        = op!(LinkPolicy, 0x000c),
    WriteLinkPolicySettings       = op!(LinkPolicy, 0x000d),
    ReadDefaultLinkPolicySettings = op!(LinkPolicy, 0x000e),
    WriteDefaultLinkPolicySettings= op!(LinkPolicy, 0x000f),
    FlowSpec                      = op!(LinkPolicy, 0x0010),
    SniffSubrating                = op!(LinkPolicy, 0x0011),

    // Controller & Baseband commands
    SetEvtMask                    = op!(Baseband, 0x0001),
    Reset                         = op!(Baseband, 0x0003),
    SetEventFilter                = op!(Baseband, 0x0005),
    Flush                         = op!(Baseband, 0x0008),
    ReadPinType                   = op!(Baseband, 0x0009),
    WritePinType                  = op!(Baseband, 0x000a),
    CreateNewUnitKey              = op!(Baseband, 0x000b),
    ReadStoredLinkKey             = op!(Baseband, 0x000d),
    WriteStoredLinkKey            = op!(Baseband, 0x0011),
    DeleteStoredLinkKey           = op!(Baseband, 0x0012),
    WriteLocalName                = op!(Baseband, 0x0013),
    ReadLocalName                 = op!(Baseband, 0x0014),
    ReadConnAcceptTimeout         = op!(Baseband, 0x0015),
    WriteConnAcceptTimeout        = op!(Baseband, 0x0016),
    ReadPageTimeout               = op!(Baseband, 0x0017),
    WritePageTimeout              = op!(Baseband, 0x0018),
    ReadScanEnable                = op!(Baseband, 0x0019),
    WriteScanEnable               = op!(Baseband, 0x001a),
    ReadPageScanActivity          = op!(Baseband, 0x001b),
    WritePageScanActivity         = op!(Baseband, 0x001c),
    ReadInquiryScanActivity       = op!(Baseband, 0x001d),
    WriteInquiryScanActivity      = op!(Baseband, 0x001e),
    ReadAuthEnable                = op!(Baseband, 0x001f),
    WriteAuthEnable               = op!(Baseband, 0x0020),
    ReadEncryptMode               = op!(Baseband, 0x0021),
    WriteEncryptMode              = op!(Baseband, 0x0022),
    ReadClassOfDevice             = op!(Baseband, 0x0023),
    WriteClassOfDevice            = op!(Baseband, 0x0024),
    ReadVoiceSetting              = op!(Baseband, 0x0025),
    WriteVoiceSetting             = op!(Baseband, 0x0026),
    ReadAutoFlushTimeout          = op!(Baseband, 0x0027),
    WriteAutoFlushTimeout         = op!(Baseband, 0x0028),
    ReadNumBroadcastRetrans       = op!(Baseband, 0x0029),
    WriteNumBroadcastRetrans      = op!(Baseband, 0x002a),
    ReadHoldModeActivity          = op!(Baseband, 0x002b),
    WriteHoldModeActivity         = op!(Baseband, 0x002c),
    ReadTransmitPowerLevel        = op!(Baseband, 0x002d),
    ReadSynchronousFlowControlEnable = op!(Baseband, 0x002e),
    WriteSynchronousFlowControlEnable = op!(Baseband, 0x002f),
    SetControllerToHostFlowControl = op!(Baseband, 0x0031),
    HostBufferSize                = op!(Baseband, 0x0033),
    HostNumberOfCompletedPackets  = op!(Baseband, 0x0035),
    ReadLinkSupervisionTimeout    = op!(Baseband, 0x0036),
    WriteLinkSupervisionTimeout   = op!(Baseband, 0x0037),
    ReadNumberOfSupportedIac      = op!(Baseband, 0x0038),
    ReadCurrentIacLap             = op!(Baseband, 0x0039),
    WriteCurrentIacLap            = op!(Baseband, 0x003a),
    ReadPageScanPeriodMode        = op!(Baseband, 0x003b),
    WritePageScanPeriodMode       = op!(Baseband, 0x003c),
    ReadPageScanMode              = op!(Baseband, 0x003d),
    WritePageScanMode             = op!(Baseband, 0x003e),
    SetAFHHostChannelClassification = op!(Baseband, 0x003f),
    ReadInquiryScanType           = op!(Baseband, 0x0042),
    WriteInquiryScanType          = op!(Baseband, 0x0043),
    ReadInquiryMode               = op!(Baseband, 0x0044),
    WriteInquiryMode              = op!(Baseband, 0x0045),
    ReadPageScanType              = op!(Baseband, 0x0046),
    WritePageScanType             = op!(Baseband, 0x0047),
    ReadAFHChannelAssessmentMode  = op!(Baseband, 0x0048),
    WriteAFHChannelAssessmentMode = op!(Baseband, 0x0049),
    ReadAnonMode                  = op!(Baseband, 0x004a),
    WriteAnonMode                 = op!(Baseband, 0x004b),
    ReadAliasAuthEnable           = op!(Baseband, 0x004c),
    WriteAliasAuthEnable          = op!(Baseband, 0x004d),
    ReadAnonAddrChangeParams      = op!(Baseband, 0x004e),
    WriteAnonAddrChangeParams     = op!(Baseband, 0x004f),
    ResetFixedAddrAttemptsCounter = op!(Baseband, 0x0050),
    ReadExtendedInquiryResponse   = op!(Baseband, 0x0051),
    WriteExtendedInquiryResponse  = op!(Baseband, 0x0052),
    RefreshEncryptionKey          = op!(Baseband, 0x0053),
    ReadSimplePairingMode         = op!(Baseband, 0x0055),
    WriteSimplePairingMode        = op!(Baseband, 0x0056),
    ReadLocalOOBData              = op!(Baseband, 0x0057),
    ReadInquiryResponseTransmitPowerLevel = op!(Baseband, 0x0058),
    WriteInquiryTransmitPowerLevel = op!(Baseband, 0x0059),
    ReadDefaultErrDataReporting   = op!(Baseband, 0x005a),
    WriteDefaultErrDataReporting  = op!(Baseband, 0x005b),
    EnhanSetupSyncConn            = op!(Baseband, 0x005c),
    AcceptExtSyncConnReq          = op!(Baseband, 0x005d),

    // Informational parameters
    ReadLocalVerInfo              = op!(Info,        0x0001),
    ReadLocalSupportedCommands    = op!(Info,        0x0002),
    ReadLocalSupportedFeatures    = op!(Info,        0x0003),
    ReadLocalExtendedFeatures     = op!(Info,        0x0004),
    ReadBufSize                   = op!(Info,        0x0005),
    ReadBdAddr                    = op!(Info,        0x0009),

    // Status parameters
    ReadFailedContactCounter      = op!(Status,      0x0001),
    ResetFailedContactCounter     = op!(Status,      0x0002),
    ReadLinkQuality               = op!(Status,      0x0003),
    ReadRssi                      = op!(Status,      0x0005),
    ReadAfhChannelMap             = op!(Status,      0x0006),
    ReadClock                     = op!(Status,      0x0007),
    ReadEncryptionKeySize         = op!(Status,      0x0008),
    ReadLocalAmpInfo              = op!(Status,      0x0009),
    ReadLocalAmpAssoc             = op!(Status,      0x000a),
    WriteRemoteAmpAssoc           = op!(Status,      0x000b),
    GetMwsTransportLayerConfig    = op!(Status,      0x000c),
    SetTriggeredClockCapture      = op!(Status,      0x000d),

    // Testing commands
    ReadLoopbackMode              = op!(Testing,     0x0001),
    WriteLoopbackMode             = op!(Testing,     0x0002),
    EnableDeviceUnderTestMode     = op!(Testing,     0x0003),
    WriteSimplePairingDebugMode   = op!(Testing,     0x0004),
    EnableAmpReceiverReports      = op!(Testing,     0x0007),
    AmpTestEnd                    = op!(Testing,     0x0008),
    AmpTest                       = op!(Testing,     0x0009),
    WriteSecureConnectionsTestMode = op!(Testing,    0x000a),
    ReadSecureConnectionsTestMode = op!(Testing,     0x000b),

    // LE Controller commands
    LeSetEvtMask                  = op!(Le,          0x0001),
    LeReadBufSizeV1               = op!(Le,          0x0002),
    LeReadBufSizeV2               = op!(Le,          0x0060),
    LeReadLocalFeaturesPage0      = op!(Le,          0x0003),
    LeSetRandomAddress            = op!(Le,          0x0005),
    LeSetAdvPAram                 = op!(Le,          0x0006),
    LeReadAdvPhyChanTxPower       = op!(Le,          0x0007),
    LeSetAdvData                  = op!(Le,          0x0008),
    LeSetScanRespData             = op!(Le,          0x0009),
    LeSetAdvEnable                = op!(Le,          0x000a),
    LeSetScanParam                = op!(Le,          0x000b),
    LeSetScanEnable               = op!(Le,          0x000c),
    LeCreateConn                  = op!(Le,          0x000d),
    LeCreateConnCancel            = op!(Le,          0x000e),
    LeReadFilterAcceptListSize    = op!(Le,          0x000f),
    LeClearFilterAcceptList       = op!(Le,          0x0010),
    LeAddDevToFilterAcceptList    = op!(Le,          0x0011),
    LeRemDevFromFilterAcceptList  = op!(Le,          0x0012),
    LeConnUpdate                  = op!(Le,          0x0013),
    LeSetHostChanClass            = op!(Le,          0x0014),
    LeReadChanMAp                 = op!(Le,          0x0015),
    LeReadRemFeatPage0            = op!(Le,          0x0016),
    LeEncrypt                     = op!(Le,          0x0017),
    LeRand                        = op!(Le,          0x0018),
    LeEnableEncrypt               = op!(Le,          0x0019),
    LeLtkReqReply                 = op!(Le,          0x001a),
    LeLtkReqNegReply              = op!(Le,          0x001b),
    LeReadSupportedStates         = op!(Le,          0x001c),
    LeReceiverTestV1              = op!(Le,          0x001d),
    LeReceiverTestV2              = op!(Le,          0x0033),
    LeReceiverTestV3              = op!(Le,          0x004f),
    LeTransmitterTestV1           = op!(Le,          0x001e),
    LeTransmitterTestV2           = op!(Le,          0x0034),
    LeTransmitterTestV3           = op!(Le,          0x0050),
    LeTransmitterTestV4           = op!(Le,          0x007b),
    LeTestEnd                     = op!(Le,          0x001f),
    LeRemoteConnParamReqReply     = op!(Le,          0x0020),
    LeRemoteConnParamReqNegReply  = op!(Le,          0x0021),
    LeSetDataLength               = op!(Le,          0x0022),
    LeReadSuggDefDataLength       = op!(Le,          0x0023),
    LeWriteSuggDefDataLength      = op!(Le,          0x0024),
    LeReadLocalP256PubKey         = op!(Le,          0x0025),
    LeGenerateDHKeyV1             = op!(Le,          0x0026),
    LeGenerateDHKeyV2             = op!(Le,          0x005e),
    LeAddDevToResolvList          = op!(Le,          0x0027),
    LeRemDevFromResolvList        = op!(Le,          0x0028),
    LeClearResolvList             = op!(Le,          0x0029),
    LeReadResolvListSize          = op!(Le,          0x002a),
    LeReadPeerResolvAddress       = op!(Le,          0x002b),
    LeReadLocalResolvAddress      = op!(Le,          0x002c),
    LeSetAddressResolutionEnable  = op!(Le,          0x002d),
    LeSetResolvPrivAddrTimeout    = op!(Le,          0x002e),
    LeReadMaxDataLength           = op!(Le,          0x002f),
    LeReadPhy                     = op!(Le,          0x0030),
    LeSetDefaultPhy               = op!(Le,          0x0031),
    LeSetPhy                      = op!(Le,          0x0032),
    LeSetAdvSetRandAddr           = op!(Le,          0x0035),
    LeSetExtAdvParamV1            = op!(Le,          0x0036),
    LeSetExtAdvParamV2            = op!(Le,          0x007f),
    LeSetExtAdvData               = op!(Le,          0x0037),
    LeSetExtScanRespData          = op!(Le,          0x0038),
    LeSetExtAdvEnable             = op!(Le,          0x0039),
    LeReadMaxAdvDataLength        = op!(Le,          0x003a),
    LeReadNumSuppAdvSets          = op!(Le,          0x003b),
    LeRemoveAdvSet                = op!(Le,          0x003c),
    LeClearAdvSets                = op!(Le,          0x003d),
    LeSetPeriodicAdvParamV1       = op!(Le,          0x003e),
    LeSetPeriodicAdvData          = op!(Le,          0x003f),
    LeSetPeriodicAdvEnable        = op!(Le,          0x0040),
    LeSetExtScanParam             = op!(Le,          0x0041),
    LeSetExtScanEnable            = op!(Le,          0x0042),
    LeExtCreateConnV1             = op!(Le,          0x0043),
    LeExtCreateConnV2             = op!(Le,          0x0085),
    LePeriodicAdvCreateSync       = op!(Le,          0x0044),
    LePeriodicAdvCreateSyncCancel = op!(Le,          0x0045),
    LePeriodicAdvTerminateSync    = op!(Le,          0x0046),
    LeAddDevToPeriodicAdvList     = op!(Le,          0x0047),
    LeRemDevFromPeriodicAdvList   = op!(Le,          0x0048),
    LeClearPeriodicAdvList        = op!(Le,          0x0049),
    LeReadPeriodicAdvListSize     = op!(Le,          0x004a),
    LeReadTransmitPower           = op!(Le,          0x004b),
    LeReadRfPathCompensation      = op!(Le,          0x004c),
    LeWriteRfPathCompensation     = op!(Le,          0x004d),
    LeSetPrivacyMode              = op!(Le,          0x004e),
    LeSetPeriodicAdvParamV2       = op!(Le,          0x0086),

    #[num_enum(catch_all)]
    Unknown(u16),
}

impl fmt::Display for Op {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        use Op::*;

        match self {
            // Link Control commands
            Inquiry                       => write!(f, "Inquiry"),
            InquiryCancel                 => write!(f, "Inquiry Cancel"),
            PeriodicInquiryMode           => write!(f, "Periodic Inquiry Mode"),
            ExitPeriodicInquiryMode       => write!(f, "Exit Periodic Inquiry Mode"),
            CreateConn                    => write!(f, "Create Connection"),
            Disconnect                    => write!(f, "Disconnect"),
            AddScoConn                    => write!(f, "Add SCO Connection"),
            CreateConnCancel              => write!(f, "Create Connection Cancel"),
            AcceptConnReq                 => write!(f, "Accept Connection Request"),
            RejectConnReq                 => write!(f, "Reject Connection Request"),
            LinkKeyReqReply               => write!(f, "Link Key Request Reply"),
            LinkKeyReqNegReply            => write!(f, "Link Key Request Negative Reply"),
            PinCodeReqReply               => write!(f, "PIN Code Request Reply"),
            PinCodeReqNegReply            => write!(f, "PIN Code Request Negative Reply"),
            ChangeConnPacketType          => write!(f, "Change Connection Packet Type"),
            AuthRequested                 => write!(f, "Authentication Requested"),
            SetConnEncryption             => write!(f, "Set Connection Encryption"),
            ChangeConnLinkKey             => write!(f, "Change Connection Link Key"),
            MasterLinkKey                 => write!(f, "Master Link Key"),
            RemoteNameReq                 => write!(f, "Remote Name Request"),
            RemoteNameReqCancel           => write!(f, "Remote Name Request Cancel"),
            ReadRemoteSuppFeatures        => write!(f, "Read Remote Supported Features"),
            ReadRemoteExtFeatures         => write!(f, "Read Remote Extended Features"),
            ReadRemoteVerInfo             => write!(f, "Read Remote Version Information"),
            ReadClockOffset               => write!(f, "Read Clock Offset"),
            ReadLmpHandle                 => write!(f, "Read LMP Handle"),
            SetupSyncConn                 => write!(f, "Setup Synchronous Connection"),
            AcceptSyncConnReq             => write!(f, "Accept Synchronous Connection Request"),
            RejectSyncConnReq             => write!(f, "Reject Synchronous Connection Request"),
            IoCapReqReply                 => write!(f, "IO Capability Request Reply"),
            UserConfirmReqReply           => write!(f, "User Confirmation Request Reply"),
            UserConfirmReqNegReply        => write!(f, "User Confirmation Request Negative Reply"),
            UserPasskeyReqReply           => write!(f, "User Passkey Request Reply"),
            UserPasskeyReqNegReply        => write!(f, "User Passkey Request Negative Reply"),
            RemoteOobDataReqReply         => write!(f, "Remote OOB Data Request Reply"),
            RemoteOobDataReqNegReply      => write!(f, "Remote OOB Data Request Negative Reply"),
            IoCapReqNegReply              => write!(f, "IO Capability Request Negative Reply"),
            CreatePhyLink                 => write!(f, "Create Physical Link"),
            AcceptPhyLink                 => write!(f, "Accept Physical Link"),
            DisconnectPhyLink             => write!(f, "Disconnect Physical Link"),
            CreateLogicalLink             => write!(f, "Create Logical Link"),
            AcceptLogicalLink             => write!(f, "Accept Logical Link"),
            DisconnectLogicalLink         => write!(f, "Disconnect Logical Link"),
            LogicalLinkCancel             => write!(f, "Logical Link Cancel"),
            FlowSpecModify                => write!(f, "Flow Specification Modify"),
            EnhancedSetupSyncConn         => write!(f, "Enhanced Setup Synchronous Connection"),
            EnhancedAcceptSyncConnReq     => write!(f, "Enhanced Accept Synchronous Connection Request"),
            TruncatedPage                 => write!(f, "Truncated Page"),
            TruncatedPageCancel           => write!(f, "Truncated Page Cancel"),
            SetConnlessSlaveBroadcast     => write!(f, "Set Connectionless Slave Broadcast"),
            SetConnlessSlaveBroadcastRecv => write!(f, "Set Connectionless Slave Broadcast Receive"),
            StartSyncTrain                => write!(f, "Start Synchronization Train"),
            RecvSyncTrain                 => write!(f, "Receive Synchronization Train"),

            // Link Policy Commands
            HoldMode                      => write!(f, "Hold Mode"),
            SniffMode                     => write!(f, "Sniff Mode"),
            ExitSniffMode                 => write!(f, "Exit Sniff Mode"),
            ParkState                     => write!(f, "Park State"),
            ExitParkState                 => write!(f, "Exit Park State"),
            QoSSetup                      => write!(f, "QoS Setup"),
            RoleDiscovery                 => write!(f, "Role Discovery"),
            SwitchRole                    => write!(f, "Switch Role"),
            ReadLinkPolicySettings        => write!(f, "Read Link Policy Settings"),
            WriteLinkPolicySettings       => write!(f, "Write Link Policy Settings"),
            ReadDefaultLinkPolicySettings => write!(f, "Read Default Link Policy Settings"),
            WriteDefaultLinkPolicySettings=> write!(f, "Write Default Link Policy Settings"),
            FlowSpec                      => write!(f, "Flow Specification"),
            SniffSubrating                => write!(f, "Sniff Subrating"),

            // Controller & Baseband commands
            SetEvtMask                    => write!(f, "Set Event Mask"),
            Reset                         => write!(f, "Reset"),
            SetEventFilter                => write!(f, "Set Event Filter"),
            Flush                         => write!(f, "Flush"),
            ReadPinType                   => write!(f, "Read PIN Type"),
            WritePinType                  => write!(f, "Write PIN Type"),
            CreateNewUnitKey              => write!(f, "Create New Unit Key"),
            ReadStoredLinkKey             => write!(f, "Read Stored Link Key"),
            WriteStoredLinkKey            => write!(f, "Write Stored Link Key"),
            DeleteStoredLinkKey           => write!(f, "Delete Stored Link Key"),
            WriteLocalName                => write!(f, "Write Local Name"),
            ReadLocalName                 => write!(f, "Read Local Name"),
            ReadConnAcceptTimeout         => write!(f, "Read Connection Accept Timeout"),
            WriteConnAcceptTimeout        => write!(f, "Write Connection Accept Timeout"),
            ReadPageTimeout               => write!(f, "Read Page Timeout"),
            WritePageTimeout              => write!(f, "Write Page Timeout"),
            ReadScanEnable                => write!(f, "Read Scan Enable"),
            WriteScanEnable               => write!(f, "Write Scan Enable"),
            ReadPageScanActivity          => write!(f, "Read Page Scan Activity"),
            WritePageScanActivity         => write!(f, "Write Page Scan Activity"),
            ReadInquiryScanActivity       => write!(f, "Read Inquiry Scan Activity"),
            WriteInquiryScanActivity      => write!(f, "Write Inquiry Scan Activity"),
            ReadAuthEnable                => write!(f, "Read Authentication Enable"),
            WriteAuthEnable               => write!(f, "Write Authentication Enable"),
            ReadEncryptMode               => write!(f, "Read Encryption Mode"),
            WriteEncryptMode              => write!(f, "Write Encryption Mode"),
            ReadClassOfDevice             => write!(f, "Read Class of Device"),
            WriteClassOfDevice            => write!(f, "Write Class of Device"),
            ReadVoiceSetting              => write!(f, "Read Voice Setting"),
            WriteVoiceSetting             => write!(f, "Write Voice Setting"),
            ReadAutoFlushTimeout          => write!(f, "Read Automatic Flush Timeout"),
            WriteAutoFlushTimeout         => write!(f, "Write Automatic Flush Timeout"),
            ReadNumBroadcastRetrans       => write!(f, "Read Number of Broadcast Retransmissions"),
            WriteNumBroadcastRetrans      => write!(f, "Write Number of Broadcast Retransmissions"),
            ReadHoldModeActivity          => write!(f, "Read Hold Mode Activity"),
            WriteHoldModeActivity         => write!(f, "Write Hold Mode Activity"),
            ReadTransmitPowerLevel        => write!(f, "Read Transmit Power Level"),
            ReadSynchronousFlowControlEnable => write!(f, "Read Synchronous Flow Control Enable"),
            WriteSynchronousFlowControlEnable => write!(f, "Write Synchronous Flow Control Enable"),
            SetControllerToHostFlowControl => write!(f, "Set Controller to Host Flow Control"),
            HostBufferSize                => write!(f, "Host Buffer Size"),
            HostNumberOfCompletedPackets  => write!(f, "Host Number of Completed Packets"),
            ReadLinkSupervisionTimeout    => write!(f, "Read Link Supervision Timeout"),
            WriteLinkSupervisionTimeout   => write!(f, "Write Link Supervision Timeout"),
            ReadNumberOfSupportedIac      => write!(f, "Read Number of Supported IAC"),
            ReadCurrentIacLap             => write!(f, "Read Current IAC LAP"),
            WriteCurrentIacLap            => write!(f, "Write Current IAC LAP"),
            ReadPageScanPeriodMode        => write!(f, "Read Page Scan Period Mode"),
            WritePageScanPeriodMode       => write!(f, "Write Page Scan Period Mode"),
            ReadPageScanMode              => write!(f, "Read Page Scan Mode"),
            WritePageScanMode             => write!(f, "Write Page Scan Mode"),
            SetAFHHostChannelClassification => write!(f, "Set AFH Host Channel Classification"),
            ReadInquiryScanType           => write!(f, "Read Inquiry Scan Type"),
            WriteInquiryScanType          => write!(f, "Write Inquiry Scan Type"),
            ReadInquiryMode               => write!(f, "Read Inquiry Mode"),
            WriteInquiryMode              => write!(f, "Write Inquiry Mode"),
            ReadPageScanType              => write!(f, "Read Page Scan Type"),
            WritePageScanType             => write!(f, "Write Page Scan Type"),
            ReadAFHChannelAssessmentMode  => write!(f, "Read AFH Channel Assessment Mode"),
            WriteAFHChannelAssessmentMode => write!(f, "Write AFH Channel Assessment Mode"),
            ReadAnonMode                  => write!(f, "Read Anonymous Mode"),
            WriteAnonMode                 => write!(f, "Write Anonymous Mode"),
            ReadAliasAuthEnable           => write!(f, "Read Alias Authentication Enable"),
            WriteAliasAuthEnable          => write!(f, "Write Alias Authentication Enable"),
            ReadAnonAddrChangeParams      => write!(f, "Read Anonymous Address Change Parameters"),
            WriteAnonAddrChangeParams     => write!(f, "Write Anonymous Address Change Parameters"),
            ResetFixedAddrAttemptsCounter => write!(f, "Reset Fixed Address Attempts Counter"),
            ReadExtendedInquiryResponse   => write!(f, "Read Extended Inquiry Response"),
            WriteExtendedInquiryResponse  => write!(f, "Write Extended Inquiry Response"),
            RefreshEncryptionKey          => write!(f, "Refresh Encryption Key"),
            ReadSimplePairingMode         => write!(f, "Read Simple Pairing Mode"),
            WriteSimplePairingMode        => write!(f, "Write Simple Pairing Mode"),
            ReadLocalOOBData              => write!(f, "Read Local OOB Data"),
            ReadInquiryResponseTransmitPowerLevel => write!(f, "Read Inquiry Response Transmit Power Level"),
            WriteInquiryTransmitPowerLevel => write!(f, "Write Inquiry Transmit Power Level"),
            ReadDefaultErrDataReporting   => write!(f, "Read Default Error Data Reporting"),
            WriteDefaultErrDataReporting  => write!(f, "Write Default Error Data Reporting"),
            EnhanSetupSyncConn            => write!(f, "Enhanced Setup Synchronous Connection"),
            AcceptExtSyncConnReq          => write!(f, "Accept Extended Synchronous Connection Request"),

            // Informational parameters
            ReadLocalVerInfo              => write!(f, "Read Local Version Information"),
            ReadLocalSupportedCommands    => write!(f, "Read Local Supported Commands"),
            ReadLocalSupportedFeatures    => write!(f, "Read Local Supported Features"),
            ReadLocalExtendedFeatures     => write!(f, "Read Local Extended Features"),
            ReadBufSize                   => write!(f, "Read Buffer Size"),
            ReadBdAddr                    => write!(f, "Read BD_ADDR"),

            // Status parameters
            ReadFailedContactCounter      => write!(f, "Read Failed Contact Counter"),
            ResetFailedContactCounter     => write!(f, "Reset Failed Contact Counter"),
            ReadLinkQuality               => write!(f, "Read Link Quality"),
            ReadRssi                      => write!(f, "Read RSSI"),
            ReadAfhChannelMap             => write!(f, "Read AFH Channel Map"),
            ReadClock                     => write!(f, "Read Clock"),
            ReadEncryptionKeySize         => write!(f, "Read Encryption Key Size"),
            ReadLocalAmpInfo              => write!(f, "Read Local AMP Info"),
            ReadLocalAmpAssoc             => write!(f, "Read Local AMP Assoc"),
            WriteRemoteAmpAssoc           => write!(f, "Write Remote AMP Assoc"),
            GetMwsTransportLayerConfig    => write!(f, "Get MWS Transport Layer Configuration"),
            SetTriggeredClockCapture      => write!(f, "Set Triggered Clock Capture"),

            // Testing commands
            ReadLoopbackMode              => write!(f, "Read Loopback Mode"),
            WriteLoopbackMode             => write!(f, "Write Loopback Mode"),
            EnableDeviceUnderTestMode     => write!(f, "Enable Device Under Test Mode"),
            WriteSimplePairingDebugMode   => write!(f, "Write Simple Pairing Debug Mode"),
            EnableAmpReceiverReports      => write!(f, "Enable AMP Receiver Reports"),
            AmpTestEnd                    => write!(f, "AMP Test End"),
            AmpTest                       => write!(f, "AMP Test"),
            WriteSecureConnectionsTestMode => write!(f, "Write Secure Connections Test Mode"),
            ReadSecureConnectionsTestMode => write!(f, "Read Secure Connections Test Mode"),

            // LE Controller commands
            LeSetEvtMask                  => write!(f, "LE Set Event Mask"),
            LeReadBufSizeV1               => write!(f, "LE Read Buffer Size [v1]"),
            LeReadBufSizeV2               => write!(f, "LE Read Buffer Size [v2]"),
            LeReadLocalFeaturesPage0      => write!(f, "LE Read Local Supported Features Page 0"),
            LeSetRandomAddress            => write!(f, "LE Set Random Address"),
            LeSetAdvPAram                 => write!(f, "LE Set Advertising Parameters"),
            LeReadAdvPhyChanTxPower       => write!(f, "LE Read Advertising Physical Channel Tx Power"),
            LeSetAdvData                  => write!(f, "LE Set Advertising Data"),
            LeSetScanRespData             => write!(f, "LE Set Scan Response Data"),
            LeSetAdvEnable                => write!(f, "LE Set Advertising Enable"),
            LeSetScanParam                => write!(f, "LE Set Scan Parameters"),
            LeSetScanEnable               => write!(f, "LE Set Scan Enable"),
            LeCreateConn                  => write!(f, "LE Create Connection"),
            LeCreateConnCancel            => write!(f, "LE Create Connection Cancel"),
            LeReadFilterAcceptListSize    => write!(f, "LE Read Filter Accept List Size"),
            LeClearFilterAcceptList       => write!(f, "LE Clear Filter Accept List"),
            LeAddDevToFilterAcceptList    => write!(f, "LE Add Device To Filter Accept List"),
            LeRemDevFromFilterAcceptList  => write!(f, "LE Remove Device From Filter Accept List"),
            LeConnUpdate                  => write!(f, "LE Connection Update"),
            LeSetHostChanClass            => write!(f, "LE Set Host Channel Classification"),
            LeReadChanMAp                 => write!(f, "LE Read Channel Map"),
            LeReadRemFeatPage0            => write!(f, "LE Read Remote Features Page 0"),
            LeEncrypt                     => write!(f, "LE Encrypt"),
            LeRand                        => write!(f, "LE Rand"),
            LeEnableEncrypt               => write!(f, "LE Enable Encryption"),
            LeLtkReqReply                 => write!(f, "LE LTK Request Reply"),
            LeLtkReqNegReply              => write!(f, "LE LTK Request Negative Reply"),
            LeReadSupportedStates         => write!(f, "LE Read Supported States"),
            LeReceiverTestV1              => write!(f, "LE Receiver Test [v1]"),
            LeReceiverTestV2              => write!(f, "LE Receiver Test [v1]"),
            LeReceiverTestV3              => write!(f, "LE Receiver Test [v1]"),
            LeTransmitterTestV1           => write!(f, "LE Transmitter Test [v1]"),
            LeTransmitterTestV2           => write!(f, "LE Transmitter Test [v2]"),
            LeTransmitterTestV3           => write!(f, "LE Transmitter Test [v3]"),
            LeTransmitterTestV4           => write!(f, "LE Transmitter Test [v4]"),
            LeTestEnd                     => write!(f, "LE Test End"),
            LeRemoteConnParamReqReply     => write!(f, "LE Remote Connection Parameter Request Reply"),
            LeRemoteConnParamReqNegReply  => write!(f, "LE Remote Connection Parameter Request Negative Reply"),
            LeSetDataLength               => write!(f, "LE Set Data Length"),
            LeReadSuggDefDataLength       => write!(f, "LE Read Suggested Default Data Length"),
            LeWriteSuggDefDataLength      => write!(f, "LE Write Suggested Default Data Length"),
            LeReadLocalP256PubKey         => write!(f, "LE Read Local P-256 Public Key"),
            LeGenerateDHKeyV1             => write!(f, "LE Generate DHKey [v1]"),
            LeGenerateDHKeyV2             => write!(f, "LE Generate DHKey [v2]"),
            LeAddDevToResolvList          => write!(f, "LE Add Device To Resolving List"),
            LeRemDevFromResolvList        => write!(f, "LE Remove Device From Resolving List"),
            LeClearResolvList             => write!(f, "LE Clear Resolving List"),
            LeReadResolvListSize          => write!(f, "LE Read Resolving List Size"),
            LeReadPeerResolvAddress       => write!(f, "LE Read Peer Resolvable Address"),
            LeReadLocalResolvAddress      => write!(f, "LE Read Local Resolvable Address"),
            LeSetAddressResolutionEnable  => write!(f, "LE Set Address Resolution Enable"),
            LeSetResolvPrivAddrTimeout    => write!(f, "LE Set Resolvable Private Address Timeout"),
            LeReadMaxDataLength           => write!(f, "LE Read Maximum Data Length"),
            LeReadPhy                     => write!(f, "LE Read PHY"),
            LeSetDefaultPhy               => write!(f, "LE Set Default PHY"),
            LeSetPhy                      => write!(f, "LE Set PHY"),
            LeSetAdvSetRandAddr           => write!(f, "LE Set Advertising Set Random Address"),
            LeSetExtAdvParamV1            => write!(f, "LE Set Extended Advertising Parameters [v1]"),
            LeSetExtAdvParamV2            => write!(f, "LE Set Extended Advertising Parameters [v2]"),
            LeSetExtAdvData               => write!(f, "LE Set Extended Advertising Response Data"),
            LeSetExtScanRespData          => write!(f, "LE Set Extended Scan Response Data"),
            LeSetExtAdvEnable             => write!(f, "LE Set Extended Advertising Enable"),
            LeReadMaxAdvDataLength        => write!(f, "LE Read Maximum Advertising Data Length"),
            LeReadNumSuppAdvSets          => write!(f, "LE Read Number of Supported Advertising Sets"),
            LeRemoveAdvSet                => write!(f, "LE Remove Advertising Set"),
            LeClearAdvSets                => write!(f, "LE Clear Advertising Sets"),
            LeSetPeriodicAdvParamV1       => write!(f, "LE Set Periodic Advertising Parameters [v1]"),
            LeSetPeriodicAdvParamV2       => write!(f, "LE Set Periodic Advertising Parameters [v2]"),
            LeSetPeriodicAdvData          => write!(f, "LE Set Periodic Advertising Data"),
            LeSetPeriodicAdvEnable        => write!(f, "LE Set Periodic Advertising Enable"),
            LeSetExtScanParam             => write!(f, "LE Set Extended Scan Parameters"),
            LeSetExtScanEnable            => write!(f, "LE Set Extended Scan Enable"),
            LeExtCreateConnV1             => write!(f, "LE Extended Create Connection [v1]"),
            LeExtCreateConnV2             => write!(f, "LE Extended Create Connection [v2]"),
            LePeriodicAdvCreateSync       => write!(f, "LE Periodic Advertising Create Sync"),
            LePeriodicAdvCreateSyncCancel => write!(f, "LE Periodic Advertising Create Sync Cancel"),
            LePeriodicAdvTerminateSync    => write!(f, "LE Periodic Advertising Terminate Sync"),
            LeAddDevToPeriodicAdvList     => write!(f, "LE Add Device To Periodic Advertiser List"),
            LeRemDevFromPeriodicAdvList   => write!(f, "LE Remove Device From Periodic Advertiser List"),
            LeClearPeriodicAdvList        => write!(f, "LE Clear Periodic Adveriser List"),
            LeReadPeriodicAdvListSize     => write!(f, "LE Read Periodic Advertisier List Size"),
            LeReadTransmitPower           => write!(f, "LE Read Transmit Power"),
            LeReadRfPathCompensation      => write!(f, "LE Read RF Path Compensation"),
            LeWriteRfPathCompensation     => write!(f, "LE Write RF Path Compensation"),
            LeSetPrivacyMode              => write!(f, "LE Set Privacy Mode"),

            Unknown(op) => {
                write!(f, "Unknown OGF 0x{:02x} OCF 0x{:04x} (0x{:02x})", ogf!(op), ocf!(op), op)
            },
        }
    }
}

#[derive(Debug, Eq, PartialEq)]
pub struct Command <'a> {
    op: Op,
    param: &'a[u8],
}

impl Command <'_> {
    pub fn parse(data: &'_[u8]) -> IResult<&[u8], Command> {
        let (data, (op_raw, param)) = tuple((le_u16, length_data(le_u8)))(data)?;
        Ok((data, Command { op: Op::from(op_raw), param }))
    }
}

impl fmt::Display for Command<'_> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}: {:02x?}", self.op, self.param)
    }
}
